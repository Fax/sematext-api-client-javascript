/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

import { ApiClient } from "../ApiClient";
import { CreateTokenDto } from '../model/CreateTokenDto';
import { GenericApiResponse } from '../model/GenericApiResponse';
import { UpdateTokenDto } from '../model/UpdateTokenDto';

/**
* TokensApiController service.
* @module api/TokensApiControllerApi
* @version 0.1.0
*/
export class TokensApiControllerApi {

  /**
  * Constructs a new TokensApiControllerApi.
  * @alias module:api/TokensApiControllerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }



  /**
   * Create new app token
   * @param {Number} appId appId
   * @param {module:model/CreateTokenDto} dto dto
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericApiResponse} and HTTP response
   */
  createAppTokenWithHttpInfo(appId, dto) {
    let postBody = dto;

    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error("Missing the required parameter 'appId' when calling createAppToken");
    }

    // verify the required parameter 'dto' is set
    if (dto === undefined || dto === null) {
      throw new Error("Missing the required parameter 'dto' when calling createAppToken");
    }


    let pathParams = {
      'appId': appId
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GenericApiResponse;

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Create new app token
   * @param {Number} appId appId
   * @param {module:model/CreateTokenDto} dto dto
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericApiResponse}
   */
  createAppToken(appId, dto) {
    return this.createAppTokenWithHttpInfo(appId, dto)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Delete app token
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericApiResponse} and HTTP response
   */
  deleteAppToken1WithHttpInfo(appId, tokenId) {
    let postBody = null;

    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error("Missing the required parameter 'appId' when calling deleteAppToken1");
    }

    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error("Missing the required parameter 'tokenId' when calling deleteAppToken1");
    }


    let pathParams = {
      'appId': appId,
      'tokenId': tokenId
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GenericApiResponse;

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Delete app token
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericApiResponse}
   */
  deleteAppToken1(appId, tokenId) {
    return this.deleteAppToken1WithHttpInfo(appId, tokenId)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Get app available tokens
   * @param {Number} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericApiResponse} and HTTP response
   */
  getAppTokens1WithHttpInfo(appId) {
    let postBody = null;

    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error("Missing the required parameter 'appId' when calling getAppTokens1");
    }


    let pathParams = {
      'appId': appId
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GenericApiResponse;

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Get app available tokens
   * @param {Number} appId appId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericApiResponse}
   */
  getAppTokens1(appId) {
    return this.getAppTokens1WithHttpInfo(appId)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Regenerate app token)
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericApiResponse} and HTTP response
   */
  regenerateAppTokenWithHttpInfo(appId, tokenId) {
    let postBody = null;

    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error("Missing the required parameter 'appId' when calling regenerateAppToken");
    }

    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error("Missing the required parameter 'tokenId' when calling regenerateAppToken");
    }


    let pathParams = {
      'appId': appId,
      'tokenId': tokenId
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GenericApiResponse;

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}/regenerate', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Regenerate app token)
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericApiResponse}
   */
  regenerateAppToken(appId, tokenId) {
    return this.regenerateAppTokenWithHttpInfo(appId, tokenId)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Update app token (enable/disable)
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @param {module:model/UpdateTokenDto} dto dto
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericApiResponse} and HTTP response
   */
  updateAppToken1WithHttpInfo(appId, tokenId, dto) {
    let postBody = dto;

    // verify the required parameter 'appId' is set
    if (appId === undefined || appId === null) {
      throw new Error("Missing the required parameter 'appId' when calling updateAppToken1");
    }

    // verify the required parameter 'tokenId' is set
    if (tokenId === undefined || tokenId === null) {
      throw new Error("Missing the required parameter 'tokenId' when calling updateAppToken1");
    }

    // verify the required parameter 'dto' is set
    if (dto === undefined || dto === null) {
      throw new Error("Missing the required parameter 'dto' when calling updateAppToken1");
    }


    let pathParams = {
      'appId': appId,
      'tokenId': tokenId
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GenericApiResponse;

    return this.apiClient.callApi(
      '/users-web/api/v3/apps/{appId}/tokens/{tokenId}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Update app token (enable/disable)
   * @param {Number} appId appId
   * @param {Number} tokenId tokenId
   * @param {module:model/UpdateTokenDto} dto dto
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericApiResponse}
   */
  updateAppToken1(appId, tokenId, dto) {
    return this.updateAppToken1WithHttpInfo(appId, tokenId, dto)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


}
