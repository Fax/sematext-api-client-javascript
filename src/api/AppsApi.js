/*
 * Sematext Cloud API
 * API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AppDescription', 'model/GenericApiResponse', 'model/Invitation', 'model/UpdateAppInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AppDescription'), require('../model/GenericApiResponse'), require('../model/Invitation'), require('../model/UpdateAppInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.SematextCloudApi) {
      root.SematextCloudApi = {};
    }
    root.SematextCloudApi.AppsApi = factory(root.SematextCloudApi.ApiClient, root.SematextCloudApi.AppDescription, root.SematextCloudApi.GenericApiResponse, root.SematextCloudApi.Invitation, root.SematextCloudApi.UpdateAppInfo);
  }
}(this, function(ApiClient, AppDescription, GenericApiResponse, Invitation, UpdateAppInfo) {
  'use strict';

  /**
   * Apps service.
   * @module api/AppsApi
   * @version v3
   */

  /**
   * Constructs a new AppsApi. 
   * @alias module:api/AppsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAppTypesUsingGET operation.
     * @callback module:api/AppsApi~getAppTypesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App types supported for the account identified with apiKey
     * @param {module:api/AppsApi~getAppTypesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.getAppTypesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsingGET operation.
     * @callback module:api/AppsApi~getUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets defails for one particular App
     * @param {Number} anyStateAppId anyStateAppId
     * @param {module:api/AppsApi~getUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.getUsingGET = function(anyStateAppId, callback) {
      var postBody = null;

      // verify the required parameter 'anyStateAppId' is set
      if (anyStateAppId === undefined || anyStateAppId === null) {
        throw new Error("Missing the required parameter 'anyStateAppId' when calling getUsingGET");
      }


      var pathParams = {
        'anyStateAppId': anyStateAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/{anyStateAppId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteAppGuestsUsingPOST operation.
     * @callback module:api/AppsApi~inviteAppGuestsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite guests to an app
     * @param {module:model/Invitation} invitation For `app` and `apps` fields only `id` needs to be populated.Other fields can be left empty or with default values
     * @param {module:api/AppsApi~inviteAppGuestsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.inviteAppGuestsUsingPOST = function(invitation, callback) {
      var postBody = invitation;

      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling inviteAppGuestsUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/guests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppsUsersUsingGET operation.
     * @callback module:api/AppsApi~listAppsUsersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users of apps accessible to this account
     * @param {module:api/AppsApi~listAppsUsersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.listAppsUsersUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsingGET operation.
     * @callback module:api/AppsApi~listUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all apps accessible by account identified with apiKey
     * @param {module:api/AppsApi~listUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.listUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDescriptionUsingPUT operation.
     * @callback module:api/AppsApi~updateDescriptionUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update description of the app
     * App can be in any state
     * @param {Number} anyStateAppId App Id
     * @param {Object} opts Optional parameters
     * @param {module:model/AppDescription} opts.updateDetails Update Details
     * @param {module:api/AppsApi~updateDescriptionUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.updateDescriptionUsingPUT = function(anyStateAppId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateDetails'];

      // verify the required parameter 'anyStateAppId' is set
      if (anyStateAppId === undefined || anyStateAppId === null) {
        throw new Error("Missing the required parameter 'anyStateAppId' when calling updateDescriptionUsingPUT");
      }


      var pathParams = {
        'anyStateAppId': anyStateAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/{anyStateAppId}/description', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT1 operation.
     * @callback module:api/AppsApi~updateUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update app
     * App can be in any state
     * @param {module:model/UpdateAppInfo} dto dto
     * @param {Number} anyStateAppId App Id
     * @param {module:api/AppsApi~updateUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericApiResponse}
     */
    this.updateUsingPUT1 = function(dto, anyStateAppId, callback) {
      var postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling updateUsingPUT1");
      }

      // verify the required parameter 'anyStateAppId' is set
      if (anyStateAppId === undefined || anyStateAppId === null) {
        throw new Error("Missing the required parameter 'anyStateAppId' when calling updateUsingPUT1");
      }


      var pathParams = {
        'anyStateAppId': anyStateAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericApiResponse;

      return this.apiClient.callApi(
        '/users-web/api/v3/apps/{anyStateAppId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
